
package com.geekbrains.client;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class LogMsg {
    private final static String logPfx = "history";
    private static String logFile;
    private static BufferedWriter logBuffer;

    public static void open(String str) {
        logFile = logPfx + "_" + str + ".txt";
        try {
            logBuffer = new BufferedWriter(new FileWriter(logFile,true));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void close() {
        try {
            logBuffer.flush();
            logBuffer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void write(String msg) {
        try {
            logBuffer.write(msg + "\n");
            logBuffer.flush();
        } catch (IOException e) {
            System.out.println("Не могу записать в файл");
            e.printStackTrace();
        }
    }
}

    public static void connect() {
        try {
            socket = new Socket("localhost", 8189);
            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());
            Thread clientListenerThread = new Thread(() -> {
                try {
                    while (true) {
                        String msg = in.readUTF();
                        if (msg.startsWith("/authok ")) {
                            String login = msg.split("\\s")[1];
                            callOnAuthenticated.callback(login);
                            LogMsg.open(login);
                            break;
                        }
                    }
                    while (true) {
                        String msg = in.readUTF();
                        if (msg.equals("/end")) {
                            break;
                        }
                        callOnMsgReceived.callback(msg);
                    }
                } catch (IOException e) {
                    callOnException.callback("Соединение с сервером разорвано");
                } finally {
                    closeConnection();
                }
            });
            clientListenerThread.setDaemon(true);
            clientListenerThread.start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public static void closeConnection() {
        callOnCloseConnection.callback();
        LogMsg.close();
        try {
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	

    public void linkCallbacks() {
        Network.setCallOnException(args -> showAlert(args[0].toString()));

        Network.setCallOnCloseConnection(args -> setAuthenticated(false));

        Network.setCallOnAuthenticated(args -> {
            setAuthenticated(true);
            nickname = args[0].toString();
        });

        Network.setCallOnMsgReceived(args -> {
            String msg = args[0].toString();
            if (msg.startsWith("/")) {
                if (msg.startsWith("/clients ")) {
                    String[] tokens = msg.split("\\s");
                    Platform.runLater(() -> {
                        clientsList.getItems().clear();
                        for (int i = 1; i < tokens.length; i++) {
                            clientsList.getItems().add(tokens[i]);
                        }
                    });
                }
                if (msg.startsWith("/yournickis ")) {
                    nickname = msg.split("\\s")[1];
                }
            } else {
                textArea.appendText(msg + "\n");
                LogMsg.write(msg);
            }
        });
    }	